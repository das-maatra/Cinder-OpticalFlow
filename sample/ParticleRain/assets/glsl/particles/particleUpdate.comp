#version 420 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable
#extension GL_ARB_compute_variable_group_size : enable

#include "particleCommon.glsl"

//uniforms 
uniform sampler2D			uTexOpticalFlow;
uniform vec2 				uCanvasSize;
uniform float				uForceMult;
uniform float               uMouseForce;
uniform vec3                uMousePos;
uniform float               uWindowHeight;
uniform float               uGravity;

layout( std140, binding = 0 ) buffer Part
{
    Particle particles[];
};

//layout( local_size_variable ) in;
layout( local_size_x = 8, local_size_y = 1, local_size_z = 1 ) in;

// returns optical flow velocity based on parfticle position
vec2 lookupOpticalFlowVelocity(vec2 pos) {
	vec2 coord = (pos.xy / uCanvasSize);
	// flipping y coordinate
	coord.y = 1.0 - coord.y; 
	vec4 col = texture2D(uTexOpticalFlow, coord);
	if (col.w >0.95)  col.z=col.z*-1;
	return vec2(-1*(col.y-col.x),col.z);
}

const float dt2 = 1.0 / (60.0 * 60.0);

float random (vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))*43758.5453123);
}


void main()
{
  uint gid = gl_GlobalInvocationID.x;	// The .y and .z are both 1 in this case.

  vec3  position         =   particles[gid].pos;
  vec3  pposition        =   particles[gid].ppos;
  vec3  home             =   particles[gid].home;
  vec4  color            =   particles[gid].color;
  float damping          =   particles[gid].damping;

  
  //adding gravity
  position.y += uGravity*damping;
  if(position.y > uWindowHeight){
    position.y = -100*random(position.xy);
  }

  // adding optical flow vel
  vec2 opticalFlowVel = lookupOpticalFlowVelocity( particles[gid].pos.xy );
  position.xy += opticalFlowVel * uForceMult;
  
  /*
  if(opticalFlowVel.x>0.0 || opticalFlowVel.y >0.0){
  
	vec2 dir = position.xy - opticalFlowVel;
    float d2 = length( dir );
    d2 *= d2;
	position.xy += opticalFlowVel * uForceMult * (dir / d2);   
  }
  */

  // mouse interaction
  /*
  if( uMouseForce > 0.0 )
  {
    vec3 dir = position - uMousePos;
    float d2 = length( dir );
    d2 *= d2;
    position += uMouseForce * dir / d2;
  }
  */
   
    
  vec3 vel = (position - pposition) * damping;
  particles[gid].ppos = position;
  vec3 acc = (home - position) * 32.0f;
  particles[gid].pos = position + vel * dt2;// + vec3(opticalFlowVel, 0.0) * dt2;
  
  //particles[gid].color = color;

  //particles[gid].pos = position;
    
}
